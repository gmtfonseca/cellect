"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var KEY_STATE = {
  Up: 0,
  Down: 1
};

var Key = /*#__PURE__*/function () {
  function Key(code) {
    _classCallCheck(this, Key);

    this.code = code;
    this.state = KEY_STATE.Up;
  }

  _createClass(Key, [{
    key: "isDown",
    value: function isDown() {
      return this.state === KEY_STATE.Down;
    }
  }]);

  return Key;
}();

var sumKey = new Key(107);
var minusKey = new Key(109);
var hoveredCell, totalElement;
injectTotalHtml();

function injectTotalHtml() {
  fetch(chrome.runtime.getURL('/total.html')).then(function (res) {
    return res.text();
  }).then(function (html) {
    document.body.insertAdjacentHTML('beforeend', html);
    totalElement = document.getElementById('total');
  });
}

window.onkeydown = function (e) {
  updateKeyState(e.keyCode, KEY_STATE.Down);
  updateCursor();
};

window.onkeyup = function (e) {
  updateKeyState(e.keyCode, KEY_STATE.Up);
  updateCursor();
};

window.onmouseover = function (e) {
  hoveredCell = e.target;
  updateCursor();
};

function updateKeyState(code, state) {
  switch (code) {
    case sumKey.code:
      sumKey.state = state;
      break;

    case minusKey.code:
      minusKey.state = state;
      break;
  }
}

function updateCursor() {
  if (hoveredCell) {
    if (hoveredCell.tagName === 'TD' && (sumKey.isDown() || minusKey.isDown())) {
      hoveredCell.style.cursor = 'pointer';
    } else {
      hoveredCell.style.cursor = 'default';
    }
  }
}

var selectedCells = new Map();
var cells = document.querySelectorAll('td');
cells.forEach(function (cell) {
  return cell.addEventListener('click', function () {
    if (sumKey.isDown() || minusKey.isDown()) {
      var row = cell.closest('tr').rowIndex - 1;
      var col = cell.cellIndex;
      var cellIdx = "".concat(row, ":").concat(col);
      var value = parseNumber(cell.innerText);

      if (!Number.isNaN(value)) {
        if (selectedCells.has(cellIdx)) {
          selectedCells["delete"](cellIdx);
        } else {
          var signedValue = sumKey.isDown() ? value : -value;
          selectedCells.set(cellIdx, signedValue);
        }

        cell.classList.toggle('selected');
        var total = Array.from(selectedCells.values()).reduce(function (prev, curr) {
          return prev + curr * 100;
        }, 0) / 100;

        if (total === 0) {
          totalElement.style.display = 'none';
        } else {
          totalElement.style.display = 'block';
        }

        var totalFormatted = new Intl.NumberFormat('pt-BR').format(total);
        totalElement.innerText = totalFormatted;
      }
    } else {
      totalElement.innerText = '';
      totalElement.style.display = 'none';
    }
  }, false);
});

function parseNumber(str) {
  var brazilianStrNum = str.trim().replace(',', '@').replace('.', '').replace('@', '.');
  return Number(brazilianStrNum);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,